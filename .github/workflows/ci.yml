name: "CI"

on:
  push:

jobs:
  code-format:
    name: "🔍 Python code format"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Check-out"
        uses: actions/checkout@v3
      - name: "🧰 Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: pyproject.toml
      - name: "🧰 Install Protoc"
        uses: arduino/setup-protoc@v1
      - name: "🧰 Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install .[test]
      - name: "🔍 Check Python code format"
        run: flake8 archive_query_log/
  lint:
    name: "🔍 Python Lint"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Check-out"
        uses: actions/checkout@v2
      - name: "🧰 Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: pyproject.toml
      - name: "🧰 Install Protoc"
        uses: arduino/setup-protoc@v1
      - name: "🧰 Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install .[test]
      - name: "🔍 Lint Python code"
        run: pylint -E archive_query_log
  unit-tests:
    name: "🧪 Python unit tests"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Check-out"
        uses: actions/checkout@v2
      - name: "🧰 Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: pyproject.toml
      - name: "🧰 Install Protoc"
        uses: arduino/setup-protoc@v1
      - name: "🧰 Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install .[test]
      - name: "🧪 Test Python code"
        run: pytest --cov=./ --cov-report=xml archive_query_log/
      - name: "📤 Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        if: matrix.python == '3.9' && matrix.os == 'ubuntu-latest'
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
  release:
    name: "🚀 Create GitHub release"
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs:
      - code-format
      - lint
      - unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Check-out"
        uses: actions/checkout@v2
      - name: "🏷️ Get version tag"
        id: get-version
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}
      - name: "📥 Download Python wheel"
        uses: actions/upload-artifact@v3
        with:
          name: wheel
          path: dist/*
      - name: "🚀 Create GitHub release"
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get-version.outputs.tag }}
          files: dist/*
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
          generate_release_notes: true